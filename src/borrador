import './App.css'

/* global window */
import React, { useState, useEffect, useRef } from 'react';
import { createRoot } from 'react-dom/client';
import { Map } from 'react-map-gl';
import { Dropdown, Tooltip } from 'flowbite-react';
import maplibregl from 'maplibre-gl';
// import { AmbientLight, PointLight, LightingEffect } from '@deck.gl/core';
import DeckGL from '@deck.gl/react';
import { TripsLayer } from '@deck.gl/geo-layers';
import { GeoJsonLayer } from '@deck.gl/layers';

import mapboxgl from 'mapbox-gl';
import {MapboxLayer} from '@deck.gl/mapbox';

import trips from "./data/salidatercercolab.json"
import redes from "./data/parsing_network.json"


// Source data
const DATA_URL = {
  TRIPS: trips,
  NETWORK: redes,
};


const DEFAULT_THEME = {
  trailColor0: [253, 128, 93],
  trailColor1: [23, 184, 190],
};

const INITIAL_VIEW_STATE = {
  longitude: -79.0,
  latitude: -2.9,
  zoom: 2,
  pitch: 45,
  bearing: 0,
};

const MAP_STYLE = 'https://basemaps.cartocdn.com/gl/light-matter-nolabels-gl-style/style.json';
//const MAP_STYLE = 'mapbox://styles/mapbox/streets-v12';


export default function App({
  trips = DATA_URL.TRIPS,
  net = DATA_URL.NETWORK,
  trailLength = 50,
  initialViewState = INITIAL_VIEW_STATE,
  mapStyle = MAP_STYLE,
  theme = DEFAULT_THEME,
  loopLength = 86400,
  initialAnimationSpeed = 1,
}) {
  const [tooltip, setTooltip] = useState(null);
  const [isPlaying, setPlaying] = useState(true);
  const [time, setTime] = useState(0);
  const [animationSpeed, setAnimationSpeed] = useState(initialAnimationSpeed);
  const [networkLayerVisible, setNetworkLayerVisible] = useState(true);
  const [tripsLayerVisible, setTripsLayerVisible] = useState(true);
  //custom layers
  const [customLayer1, setCustomLayer1] = useState(null);
  const [customLayerVisible1, setCustomLayerVisible1] = useState(false);
  const [customLayer2, setCustomLayer2] = useState(null);
  const [customLayerVisible2, setCustomLayerVisible2] = useState(false);
  const [customLayer3, setCustomLayer3] = useState(null);
  const [customLayerVisible3, setCustomLayerVisible3] = useState(false);

  const renderTooltip = () => {
    if (!tooltip) {
      return null;
    }
  
    const { x, y, content } = tooltip;
    return (
      <Tooltip style={{left: x, top: y}}>
        {content}
      </Tooltip>
    );
  };


  const animationRef = useRef();

  const [mensaje, setMensaje] = useState('');
  const clearMensaje = () => {
    setMensaje('');
  };

  const togglePlayPause = () => {
    setPlaying((prevIsPlaying) => !prevIsPlaying);
  };

  const increaseSpeed = () => {
    setAnimationSpeed((prevSpeed) => prevSpeed + 1);
  };

  const decreaseSpeed = () => {
    setAnimationSpeed((prevSpeed) => Math.max(prevSpeed - 1, 1));
    setMensaje('Decrease Speed')
  };

  const handleTimeChange = (event) => {
    const newTime = parseFloat(event.target.value);
    setTime(newTime);
  };

  const handleFileUpload = (event, setCustomLayer, setCustomLayerVisible) => {
    const file = event.target.files[0];

    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const geoJsonData = JSON.parse(e.target.result);
        setCustomLayer(geoJsonData);
        setCustomLayerVisible(true);
      };
      reader.readAsText(file);
    }
  };

  const handleCheckboxChange = (layer) => {
    switch (layer) {
      case 'network':
        setNetworkLayerVisible((prev) => !prev);
        break;
      case 'trips':
        setTripsLayerVisible((prev) => !prev);
        break;
      case 'custom1':
        setCustomLayerVisible1((prev) => !prev);
        break;
      case 'custom2':
        setCustomLayerVisible2((prev) => !prev);
        break;
      case 'custom3':
        setCustomLayerVisible3((prev) => !prev);
        break;
    
      default:
        break;
    }
  };

  const toggleLayerVisibility = (layer) => {
    switch (layer) {
      case 'network':
        setNetworkLayerVisible((prev) => !prev);
        break;
      case 'trips':
        setTripsLayerVisible((prev) => !prev);
        break;
      case 'custom1':
        setCustomLayerVisible1((prev) => !prev);
        break;
      case 'custom2':
        setCustomLayerVisible2((prev) => !prev);
        break;
      case 'custom3':
        setCustomLayerVisible3((prev) => !prev);
        break;
    
      default:
        break;
    }
  };

  const animate = () => {
    setTime((prevTime) => (prevTime + animationSpeed) % loopLength);
    animationRef.current = window.requestAnimationFrame(animate);
  };

  useEffect(() => {
    if (isPlaying) {
      animationRef.current = window.requestAnimationFrame(animate);
    } else {
      window.cancelAnimationFrame(animationRef.current);
    }

    return () => {
      window.cancelAnimationFrame(animationRef.current);
    };
  }, [isPlaying, animationSpeed]);

  const layers = [


    networkLayerVisible &&
    new GeoJsonLayer({
      id: 'MapNetwork',
      data: net,
      filled: true,
      pointRadiusMinPixels: 0,
      pointRadiusScale: 1,
      getPointRadius: (f) => 11 - f.properties.scalerank,
      getFillColor: [255, 0, 255, 255],  // centro
      getLineColor:[200, 200, 200, 255],  //lineas
      pickable: true,
      autoHighlight: true,
      onClick: info =>
      // eslint-disable-next-line
      info.object && alert(`${info.object.properties.id} (${info.object.properties.abbrev})`),
      onHover: ({ x, y, object }) => {
        if (object) {
          const { properties } = object;
          const tooltipContent = properties ? (
            <div>
              <b>ID:</b> {properties.id}
              {/* Puedes agregar más información según tus necesidades */}
            </div>
          ) : null;
          const coordinates = object.geometry.coordinates;
          x=coordinates[0]
          y=coordinates[1]
          setTooltip({ x,y, content: tooltipContent });
        } else {
          setTooltip(null);
        }
      },
  
    }),

    tripsLayerVisible &&
    new TripsLayer({
      id: 'trips',
      data: trips,
      getPath: (d) => d.path,
      getTimestamps: (d) => d.timestamps,
      getColor: (d) => theme.trailColor0,
      opacity: 1,
      widthMinPixels: 5,
      rounded: true,
      pickable: true,
      autoHighlight: true,
      trailLength,
      currentTime: time,
      shadowEnabled: false,
    }),

    customLayerVisible1 &&
    customLayer1 &&
    new GeoJsonLayer({
      id: 'CustomLayer1',
      data: customLayer1,
      filled: true,
      pointRadiusMinPixels: 5,
      pointRadiusScale: 3,
      getPointRadius: (f) => 11 - f.properties.scalerank,
      getFillColor: [0, 150, 255, 255],
      // getLineColor: [255, 0, 0, 1],
      // highlightColor: [255, 0, 255, 1], // Color de resaltado
      pickable: true,
      autoHighlight: true,

    }),

    customLayerVisible2 &&
    customLayer2 &&
    new GeoJsonLayer({
      id: 'CustomLayer2',
      data: customLayer2,
      filled: true,
      pointRadiusMinPixels: 5,
      pointRadiusScale: 3,
      getPointRadius: (f) => 11 - f.properties.scalerank,
      getFillColor: [0, 255, 0, 255],
      // getLineColor: [255, 0, 0, 1],
      // highlightColor: [255, 0, 255, 1], // Color de resaltado
      pickable: true,
      autoHighlight: true,

    }),


    customLayerVisible3 &&
    customLayer3 &&
    new GeoJsonLayer({
      id: 'CustomLayer3',
      data: customLayer3,
      filled: true,
      pointRadiusMinPixels: 5,
      pointRadiusScale: 3,
      getPointRadius: (f) => 11 - f.properties.scalerank,
      getFillColor: [255, 0, 0, 255],
      // getLineColor: [255, 0, 0, 1],
      // highlightColor: [255, 0, 255, 1], // Color de resaltado
      pickable: true,
      autoHighlight: true,

    }),

  ];



  return (

    <div className=''>
      <div className='app-name'>
      <div className="flex items-center right" >
        <h1>
          <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="#ffffffd0" transform="matrix(1, 0, 0, 1, 0, 0)" width="100" height="100">
            <defs>
              <style>
                {`
                  .cls-1 {
                    fill: none;
                    stroke: #ffffffd0;
                    stroke-miterlimit: 1;
                    stroke-width: 2px;
                  }

                  .cls-2 {
                    fill: #ffffffd0;
                  }
                `}
              </style>
            </defs>
            <g>
              <path className="cls-1" d="M9.11,5.08c0,2.39-3.81,6-3.81,6s-3.82-3.58-3.82-6A3.7,3.7,0,0,1,5.3,1.5,3.7,3.7,0,0,1,9.11,5.08Z"></path>
              <circle className="cls-2" cx="5.3" cy="5.32" r="0.95"></circle>
              <path className="cls-1" d="M4.34,13h4.3A2.39,2.39,0,0,1,11,15.34h0a2.39,2.39,0,0,1-2.38,2.39H3.86a2.39,2.39,0,0,0-2.38,2.38h0A2.39,2.39,0,0,0,3.86,22.5H17.7"></path>
              <line className="cls-1" x1="16.75" y1="9.14" x2="16.75" y2="20.59"></line>
              <polygon className="cls-1" points="16.75 14.86 21.52 14.86 20.57 12.96 21.52 11.04 16.75 11.04 16.75 14.86"></polygon>
            </g>
          </svg>
          TrafficSim-Vis
        </h1>
      </div>
      </div>



      <div className='relative'>
        <div className=' bg-gray-700/40 backdrop-blur-sm w-full absolute z-10 top-0' >
          <div className="w-full">
            <div className="flex items-center justify-center mx-auto mb-1">
            <span className="ml-2 text-gray-500 dark:text-gray-300">{animationSpeed}</span>
              <span onClick={decreaseSpeed}  
                className="p-2.5 group rounded-full hover:bg-gray-100 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-600 dark:hover:bg-gray-600 relative">

                <svg onMouseEnter={() => setMensaje('Decrease Speed')} onMouseLeave={clearMensaje} className="rtl:rotate-180 w-4 h-4 text-gray-500 dark:text-gray-300 group-hover:text-gray-900 dark:group-hover:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="white" class="w-6 h-6">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M21 16.811c0 .864-.933 1.406-1.683.977l-7.108-4.061a1.125 1.125 0 0 1 0-1.954l7.108-4.061A1.125 1.125 0 0 1 21 8.689v8.122ZM11.25 16.811c0 .864-.933 1.406-1.683.977l-7.108-4.061a1.125 1.125 0 0 1 0-1.954l7.108-4.061a1.125 1.125 0 0 1 1.683.977v8.122Z" />
                </svg>

              </span>
              {mensaje && <span className="absolute bottom-0 left-1/2 transform -translate-x-1/2 mt-2 text-gray-500 dark:text-gray-300">{mensaje}</span>}
              <span onClick={togglePlayPause} className="inline-flex items-center justify-center p-2.5 mx-2 font-medium bg-azul rounded-full hover:bg-blue-700 group focus:ring-4 focus:ring-blue-300 focus:outline-none dark:focus:ring-blue-800">
                {
                  isPlaying ?
                    <svg onMouseEnter={() => setMensaje('Pause')} onMouseLeave={clearMensaje} className="w-3 h-3 text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" stroke="white" viewBox="0 0 10 16">
                      <path fill-rule="evenodd" d="M0 .8C0 .358.32 0 .714 0h1.429c.394 0 .714.358.714.8v14.4c0 .442-.32.8-.714.8H.714a.678.678 0 0 1-.505-.234A.851.851 0 0 1 0 15.2V.8Zm7.143 0c0-.442.32-.8.714-.8h1.429c.19 0 .37.084.505.234.134.15.209.354.209.566v14.4c0 .442-.32.8-.714.8H7.857c-.394 0-.714-.358-.714-.8V.8Z" clip-rule="evenodd" />
                    </svg>
                    :
                    <svg onMouseEnter={() => setMensaje('Play')} onMouseLeave={clearMensaje} className="w-3 h-3 text-white" stroke="white" stroke-width="3"
                      version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 17.804 17.804" xml:space="preserve"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <g> <g id="c98_play"> <path d="M2.067,0.043C2.21-0.028,2.372-0.008,2.493,0.085l13.312,8.503c0.094,0.078,0.154,0.191,0.154,0.313 c0,0.12-0.061,0.237-0.154,0.314L2.492,17.717c-0.07,0.057-0.162,0.087-0.25,0.087l-0.176-0.04 c-0.136-0.065-0.222-0.207-0.222-0.361V0.402C1.844,0.25,1.93,0.107,2.067,0.043z"></path> </g> <g id="Capa_1_78_"> </g> </g> </g></svg>
                }
              </span>
              <span
                onClick={increaseSpeed}
                className="p-2.5 group rounded-full hover:bg-gray-100 me-1 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-600 dark:hover:bg-gray-600 relative">

                <svg onMouseEnter={() => setMensaje('Increase Speed')} onMouseLeave={clearMensaje} className="rtl:rotate-180 w-4 h-4 text-gray-500 dark:text-gray-300 group-hover:text-gray-900 dark:group-hover:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="white" class="w-6 h-6">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M3 8.689c0-.864.933-1.406 1.683-.977l7.108 4.061a1.125 1.125 0 0 1 0 1.954l-7.108 4.061A1.125 1.125 0 0 1 3 16.811V8.69ZM12.75 8.689c0-.864.933-1.406 1.683-.977l7.108 4.061a1.125 1.125 0 0 1 0 1.954l-7.108 4.061a1.125 1.125 0 0 1-1.683-.977V8.69Z" />
                </svg>

              </span>
              <div>
                <Dropdown dismissOnClick={false}>
                  <Dropdown.Item onClick={() => toggleLayerVisibility('network')}>
                    <span className='text-white'>
                      {networkLayerVisible ? 'Hide network' : 'Show network'}
                    </span>
                  </Dropdown.Item>
                  <Dropdown.Item onClick={() => toggleLayerVisibility('trips')}>
                    <span className='text-white'>
                      {tripsLayerVisible ? 'Hide events' : 'Show events'}
                    </span>
                  </Dropdown.Item>

                  {/*layer 1*/}
                  <Dropdown.Item onClick={() => toggleLayerVisibility('custom1')}>
                    <span className='text-white'>
                    <input type="checkbox" checked={customLayerVisible1} onChange={() => handleCheckboxChange('custom1', setCustomLayerVisible1)} />
                      {customLayerVisible1 ? 'Hide custom layer 1' : 'Show custom layer 1'}
                    </span>
                  </Dropdown.Item>
                  <Dropdown.Item>
                    <label for="nuevoArchivo1" className='text-white'>
                      Add layer 1
                    </label>
                  </Dropdown.Item>

                  {/*layer 2*/}
                  <Dropdown.Item onClick={() => toggleLayerVisibility('custom2')}>
                    <span className='text-white'>
                    <input type="checkbox" checked={customLayerVisible2} onChange={() => handleCheckboxChange('custom2', setCustomLayerVisible2)} />
                      {customLayerVisible2 ? 'Hide custom layer 2' : 'Show custom layer 2'}
                    </span>
                  </Dropdown.Item>
                  <Dropdown.Item>
                    <label for="nuevoArchivo2" className='text-white'>
                     Add layer 2
                    </label>
                  </Dropdown.Item>

                  {/*layer 3*/}
                  <Dropdown.Item onClick={() => toggleLayerVisibility('custom3')}>
                    <label className= 'text-white' >
                      <input type="checkbox" checked={customLayerVisible3} onChange={() => handleCheckboxChange('custom3', setCustomLayerVisible3)} />
                      {customLayerVisible3 ? 'Hide custom layer 3' : 'Show custom layer 3'}
                    </label>
                  </Dropdown.Item>
                  <Dropdown.Item>
                    <label for="nuevoArchivo3" className='text-white'>
                      Add layer 3
                    </label>
                  </Dropdown.Item>

                </Dropdown>
              </div>
            </div>
            {/* layer 1*/}
            <input type="file" id='nuevoArchivo1' className=' hidden' accept=".geojson" onChange={(e) => handleFileUpload(e, setCustomLayer1, setCustomLayerVisible1)} />
            
            {/* layer 2 */}
            <input type="file" id='nuevoArchivo2' className=' hidden' accept=".geojson" onChange={(e) => handleFileUpload(e, setCustomLayer2, setCustomLayerVisible2)} />

            {/* layer 3 */}
            <input type="file" id='nuevoArchivo3' className=' hidden' accept=".geojson" onChange={(e) => handleFileUpload(e, setCustomLayer3, setCustomLayerVisible3)} />


            <div className="flex items-center justify-between">
              <div className='flex' >
                <span className="text-lg text-center font-medium text-gray-100 dark:text-gray-100 w-32">{Math.floor((time % 86400) / 3600)}h {Math.floor((time % 3600) / 60)}m {time % 60}s</span>
              </div>
              <div className="w-full">
                <input
                  type="range"
                  min={0}
                  max={loopLength}
                  step={1}
                  value={time}
                  onChange={handleTimeChange}
                  className=' w-full my-auto'
                  style={{
                    background: `linear-gradient(to right, red ${((time / loopLength) * 100)}%, rgba(196, 196, 196, 0.2) ${((time / loopLength) * 100)}%)`,
                    WebkitAppearance: 'none',
                    height: '5px',
                    borderRadius: '5px',
                    outline: 'none',
                    cursor: 'pointer',
                  }}
                  
                />
              </div>
              <div className='flex' >
                <span className="text-lg text-center font-medium text-gray-100 dark:text-gray-100 w-32">{Math.floor(((loopLength-time) % 86400) / 3600)}h {Math.floor(((loopLength-time) % 3600) / 60)}m {(loopLength-time) % 60}s</span>
                
              </div>
            </div>
          </div>
        </div>
      </div>

      <DeckGL layers={layers} effects={theme.effects} initialViewState={initialViewState} controller={true}>
        <Map reuseMaps mapLib={maplibregl} mapStyle={mapStyle} preventStyleDiffing={true} />
      </DeckGL>

      {renderTooltip()}
    </div>
  );
}

export function renderToDOM(container) {
  createRoot(container).render(<App />);
}